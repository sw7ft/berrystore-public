Project Recap: X11 Application Cross-Compilation for BlackBerry 10
Overview
We've successfully cross-compiled X11 libraries and applications for BlackBerry 10, demonstrating that we can build graphical X11 applications that run on the QNX-based BB10 platform.
Key Achievements
X11 Infrastructure: Built a complete set of core X11 libraries for QNX/BlackBerry 10.
Two Working Applications:
xeyes: A classic X11 application showing eyes that follow your cursor.
simple_x11: A minimal X11 application we created from scratch.
Deployment Packages: Created self-contained packages that include all necessary libraries, making the applications portable and easy to deploy.
Libraries We Built
We cross-compiled numerous X11 libraries:
Core X11:
libX11 (X11 protocol client library)
libXau (X Authorization)
libxcb (X C Binding)
libXdmcp (X Display Manager Control Protocol)
X11 Extensions:
libXext (X Extensions library)
libXi (X Input Extension)
libXrender (X Rendering Extension)
libXfixes (X Fixes Extension)
Higher Level Libraries:
libXt (X Toolkit Intrinsics)
libXmu (X miscellaneous utilities)
libXaw (Athena Widgets)
libXpm (X PixMap)
Session Management:
libICE (Inter-Client Exchange)
libSM (Session Management)
Additional Dependencies:
FreeType (font rendering)
fontconfig (font configuration/access)
expat (XML parsing)
Technical Challenges Solved
Cross-Compilation Environment: Set up the ARM BlackBerry QNX cross-compilation toolchain correctly.
Library Dependencies: Built libraries in the correct order to satisfy dependencies.
Linking Issues: Resolved undefined symbol errors through proper linking and creating symbolic links.
Missing Headers: Created custom headers when necessary.
Deployment Strategy: Created a comprehensive packaging approach that includes:
Application binaries
All required shared libraries
Script to set up proper environment variables
Diagnostic script to verify library dependencies
Latest Solution: Simple X11 App
For our final solution, we created a minimal X11 application from scratch to avoid complex dependencies. This application:
Opens a connection to an X server
Creates a window
Displays "Hello X11 World!" text
Waits for a key press before exiting
We compiled it with the BlackBerry 10 toolchain, explicitly linking against all required libraries (libX11, libxcb, libXau, libXdmcp).
Deployment Package Contents
The bb10_x11_deploy.zip package includes:
Binaries:
bin/simple_x11: Our compiled X11 application
Libraries:
Core X11 shared libraries (.so files)
All necessary dependencies
Scripts:
run_x11.sh: Sets up environment and runs the application
check_libs.sh: Diagnostic script to verify library dependencies
Running the Application
To run the application on BB10:
Extract the zip file
Set proper permissions (chmod +x run_x11.sh)
Edit the X server address in run_x11.sh if necessary
Execute ./run_x11.sh
The application connects to an X server (either on the BB10 device or a remote machine), displays a window with text, and waits for user input.
Significance
This project demonstrates that BlackBerry 10 can run X11 applications, opening the door to porting a wide range of existing Linux graphical applications to the platform. The knowledge and infrastructure we've built can be extended to more complex applications in the future.