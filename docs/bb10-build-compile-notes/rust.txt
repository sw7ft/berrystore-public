# Rust Cross-Compilation for BlackBerry QNX 8 - Complete Guide

## Overview
Successfully cross-compiled Rust programs to run on BlackBerry QNX 8 ARM devices using the existing QNX toolchain.

## Environment Setup
- Host System: Linux x86 (32-bit container environment)
- Target System: BlackBerry QNX 8 (ARM architecture)
- QNX Toolchain: Already installed and configured
- QNX Environment Variables:
  - QNX_HOST=/root/qnx800/x86_64-linux
  - QNX_TARGET=/root/qnx800
- QNX Compiler: arm-blackberry-qnx8eabi-gcc (located at /root/bbndk/host_10_3_1_12/linux/x86/usr/bin/qcc)

## Rust Installation Process

### 1. Install Rust (32-bit for compatibility)
```bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-host i686-unknown-linux-gnu
source ~/.cargo/env
```

### 2. Install Nightly Toolchain (required for Tier 3 targets)
```bash
rustup toolchain install nightly
rustup default nightly --force-non-host
```

### 3. Add ARM Target
```bash
rustup target add arm-unknown-linux-gnueabi
```

Note: We use `arm-unknown-linux-gnueabi` (soft-float) instead of `armv7-unknown-linux-gnueabihf` (hard-float) due to VFP register compatibility issues with QNX.

## QNX Library Analysis

### Available Libraries in QNX
QNX has most required functions built into libc.so instead of separate libraries:
- pthread functions: ‚úÖ Built into libc
- dlopen/dlsym/dlclose: ‚úÖ Built into libc  
- clock_/timer_/sem_ functions: ‚úÖ Built into libc
- libutil functions: ‚ùå Not available

### Missing Libraries Workaround
Created empty stub libraries to satisfy Rust's linker requirements:
```bash
cd /root/qnx800/arm-blackberry-qnx8eabi/lib/
arm-blackberry-qnx8eabi-ar rcs libutil.a
arm-blackberry-qnx8eabi-ar rcs librt.a  
arm-blackberry-qnx8eabi-ar rcs libpthread.a
arm-blackberry-qnx8eabi-ar rcs libdl.a
```

## Cross-Compilation Configuration

### Cargo Configuration (.cargo/config.toml)
```toml
[target.arm-unknown-linux-gnueabi]
linker = "arm-blackberry-qnx8eabi-gcc"
ar = "arm-blackberry-qnx8eabi-ar"
rustflags = [
    "-C", "link-arg=-Wl,--sysroot=/root/qnx800",
    "-C", "link-arg=-L/root/qnx800/arm-blackberry-qnx8eabi/lib",
    "-C", "link-arg=-Wl,--allow-shlib-undefined",
]

[build]
target = "arm-unknown-linux-gnueabi"
```

### Project Configuration (Cargo.toml)
```toml
[package]
name = "hello_qnx"
version = "0.1.0"
edition = "2021"

[profile.dev]
panic = "abort"

[profile.release]
panic = "abort"
```

## Rust Code Limitations and Solutions

### What Works: no_std Programs
```rust
#![no_std]
#![no_main]

#[link(name = "c")]
unsafe extern "C" {
    fn printf(format: *const u8, ...) -> i32;
    fn exit(code: i32) -> !;
}

#[unsafe(no_mangle)]
pub extern "C" fn main() -> i32 {
    let hello = b"Hello QNX from Rust!\n\0";
    unsafe {
        printf(hello.as_ptr());
        exit(0);
    }
}

#[panic_handler]
fn panic(_info: &core::panic::PanicInfo) -> ! {
    loop {}
}
```

### What Doesn't Work: Full std Library
The Rust standard library uses Linux-specific functions that don't exist on QNX:
- `__errno_location` (Linux errno access)
- `syscall` (direct Linux syscalls)
- `__tls_get_addr` (Linux thread-local storage)
- `pthread_getattr_np` (Linux pthread extensions)
- `__xpg_strerror_r` (Linux strerror)
- `sigaltstack`, `getauxval` (Linux signal functions)

## Build Process

### 1. Create Project
```bash
cargo init --name hello_qnx
```

### 2. Set up cross-compilation config
```bash
mkdir .cargo
# Create .cargo/config.toml with settings above
```

### 3. Write no_std code
```bash
# Create src/main.rs with no_std code
```

### 4. Build for QNX
```bash
cargo build --release --target arm-unknown-linux-gnueabi
```

### 5. Deploy to QNX Device
```bash
# Copy target/arm-unknown-linux-gnueabi/release/hello_qnx to QNX device
# Binary only depends on libc.so.3 which is available on QNX
```

## Results and Capabilities

### ‚úÖ Working Features
- Basic Rust programs (no_std)
- Direct libc function calls
- Memory allocation via malloc/free
- File I/O via open/read/write/close
- Process control via exit
- Cross-compilation from Linux to QNX ARM

### ‚ùå Not Working
- Full Rust standard library (std)
- println! macro (requires std)
- Standard collections (Vec, HashMap) without custom allocator
- Standard threading primitives
- Standard networking APIs

### üîÑ Possible with Custom Wrappers
- Custom println-like macros using printf
- File operations wrapper
- Custom allocator for heap allocation
- QNX-specific API wrappers

## Performance
- Binary size: ~7KB for simple programs
- Dependencies: Only libc.so.3
- Runtime: Native ARM performance

## Target Architecture Details
- Target: arm-unknown-linux-gnueabi (soft-float ARM EABI)
- Architecture: 32-bit ARM
- Float ABI: Soft-float (compatible with QNX expectations)
- Dynamic Linker: /usr/lib/ldqnx.so.2 (QNX-specific)

## Comparison with Other Cross-Compilation
Similar to the successful X11 cross-compilation project:
- Uses same QNX toolchain (arm-blackberry-qnx8eabi-gcc)
- Same sysroot (/root/qnx800)
- Same library path (/root/qnx800/arm-blackberry-qnx8eabi/lib)
- Produces binaries that run natively on QNX

## Future Possibilities
1. Build custom std-like library for QNX
2. Create QNX-specific Rust crates
3. Contribute QNX support improvements to upstream Rust
4. Develop more complex applications using no_std + custom allocators

## Verification
Successfully compiled and ran "Hello QNX from Rust!" program on actual QNX device.

Date: June 20, 2025
Rust Version: 1.89.0-nightly (255aa2208 2025-06-19)
QNX Version: QNX 8.0