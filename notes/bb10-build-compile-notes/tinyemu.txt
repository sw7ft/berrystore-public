# TinyEMU QNX Build Notes

## Toolchain Information
- BlackBerry 10 Native SDK (BBNDK) - GCC 9
- Target: arm-blackberry-qnx8eabi
- Environment setup: source ~/bbndk/gcc9/bb10-gcc9/env.sh
- Build directory: ~/tinyemu_qnx_build/tinyemu

## Key Modifications for QNX Compatibility

### 1. Byteswap.h Fix in cutils.h
QNX lacks byteswap.h, so we added custom implementations of the byteswap macros:

```c
// In cutils.h - Replace the byteswap.h include with conditional code:
#ifndef __QNX__
#include <byteswap.h>
#else
/* QNX lacks byteswap.h, define functions manually */
#define bswap_16(x) ((uint16_t)((((uint16_t)(x) & 0xff00) >> 8) | \
                               (((uint16_t)(x) & 0x00ff) << 8)))

#define bswap_32(x) ((uint32_t)((((uint32_t)(x) & 0xff000000) >> 24) | \
                               (((uint32_t)(x) & 0x00ff0000) >> 8) | \
                               (((uint32_t)(x) & 0x0000ff00) << 8) | \
                               (((uint32_t)(x) & 0x000000ff) << 24)))

#define bswap_64(x) ((uint64_t)((((uint64_t)(x) & 0xff00000000000000ULL) >> 56) | \
                               (((uint64_t)(x) & 0x00ff000000000000ULL) >> 40) | \
                               (((uint64_t)(x) & 0x0000ff0000000000ULL) >> 24) | \
                               (((uint64_t)(x) & 0x000000ff00000000ULL) >> 8) | \
                               (((uint64_t)(x) & 0x00000000ff000000ULL) << 8) | \
                               (((uint64_t)(x) & 0x0000000000ff0000ULL) << 24) | \
                               (((uint64_t)(x) & 0x000000000000ff00ULL) << 40) | \
                               (((uint64_t)(x) & 0x00000000000000ffULL) << 56)))
#endif
```

### 2. Disabling Network TAP in temu.c
QNX doesn't support network TAP interfaces used by TinyEMU, so we wrapped the function and its call with conditionals:

```c
// For the tun_open function definition (around line 414):
#ifndef __QNX__
static int tun_open(const char *ifname, int ifname_size)
{
    // ... function body ...
}
#endif

// For the tun_open function call (around line 793):
#ifndef __QNX__
    if (net->net_mode == NET_MODE_TAP) {
        vlan->fd = tun_open(net->ifname, sizeof(net->ifname));
        if (vlan->fd < 0)
            return -1;
    }
#endif
```

### 3. Building TinyEMU for QNX

1. Clone the TinyEMU repository:
```bash
cd ~
mkdir -p tinyemu_qnx_build
cd tinyemu_qnx_build
git clone https://github.com/bellard/tinyemu.git
cd tinyemu
```

2. Set up the BlackBerry 10 toolchain:
```bash
source ~/bbndk/gcc9/bb10-gcc9/env.sh
```

3. Apply the QNX compatibility fixes mentioned above.

4. Build TinyEMU:
```bash
make
```

5. Creating a BlackBerry 10 package:
```bash
mkdir -p app/native
cp temu app/native/
cd app
zip -r ../tinyemu.bar META-INF MANIFEST.MF native
```

6. Deploy to device:
```bash
scp tinyemu.bar device:/accounts/1000/shared/misc/
ssh device "cd /accounts/1000/shared/misc && unzip tinyemu.bar -d tinyemu"
```

### Running TinyEMU on BlackBerry 10

TinyEMU requires a Linux kernel and root filesystem to run. You can prepare these on your development machine:

1. Download a prebuilt Linux kernel suitable for ARM emulation.
2. Create or download a minimal root filesystem (e.g., from Alpine Linux, Buildroot).
3. Transfer these files to your BlackBerry 10 device.
4. Run TinyEMU:
```bash
./temu -m 256 -kernel vmlinuz -initrd initrd.img -append "console=ttyS0 root=/dev/ram0"
```

## Troubleshooting

If you encounter compilation errors related to other missing headers or functions on QNX:
1. Identify the missing functionality using grep and build logs
2. Use similar conditional compilation approach (#ifndef __QNX__) to exclude or provide alternative implementations
3. For complex missing functionality, consider simplifying the build by disabling certain features

Remember that QNX is a POSIX-compliant operating system but lacks many Linux-specific headers and functions.